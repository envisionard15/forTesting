MACRO( INCLUDE_PACKAGE_CUDA )
FIND_PACKAGE( CUDA )
IF( NOT CUDA_FOUND )
	MESSAGE( "CUDA not found. Please set up the path to CUDA libraries." )
ELSE()
	ADD_DEFINITIONS( -DHAVE_CUDA )
	INCLUDE_DIRECTORIES( ${CUDA_INCLUDE_DIRS} )
	LINK_DIRECTORIES( ${CUDA_LIBRARY_DIRS} )
	SET( TARGET_LINK_LIBS ${TARGET_LINK_LIBS}
		${CUDA_CUDART_LIBRARY}
		${CUDA_CUDA_LIBRARY}
		${CUDA_CUFFT_LIBRARIES}
		${CUDA_CUBLAS_LIBRARIES}
		${CUDA_curand_LIBRARY}
		${CUDA_nppi_LIBRARY}
	)
ENDIF()
ENDMACRO()

MACRO( INCLUDE_PACKAGE_CVMLAUX )
# FIND_PACKAGE( Boost COMPONENTS atomic chrono date_time filesystem python system thread )
# FOREACH( _pkg ZLIB gflags glog OpenCV protobuf HDF5 OpenBLAS LevelDB LMDB Snappy )
# 	FIND_PACKAGE( ${_pkg} )
# ENDFOREACH()
FIND_PACKAGE( Caffe REQUIRED)

SET( CVMLAUX_INCLUDE_DIRS
	${Caffe_INCLUDE_DIRS}
)
MESSAGE( "CAFFE INCLUDE DIRS -> ${Caffe_INCLUDE_DIRS}" )
SET( CVMLAUX_LIBRARIES
	${Caffe_LIBRARIES}
)

MESSAGE( "CAFFE Libraries -> ${Caffe_LIBRARIES}" )

ADD_DEFINITIONS( ${Caffe_DEFINITIONS} )
MESSAGE( "CAFFE DEFINITIONS -> ${Caffe_DEFINITIONS}" )

INCLUDE_DIRECTORIES( ${CVMLAUX_INCLUDE_DIRS} )
SET( TARGET_LINK_LIBS ${TARGET_LINK_LIBS} ${CVMLAUX_LIBRARIES})
MESSAGE( "TARGET LINK LIBRARIES -> ${TARGET_LINK_LIBS}" )
ENDMACRO()
